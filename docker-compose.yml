version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: ibm-knowledge-postgres
    environment:
      POSTGRES_DB: ibm_knowledge
      POSTGRES_USER: ibm_user
      POSTGRES_PASSWORD: ibm_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ibm-knowledge-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: ibm-knowledge-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ibm-knowledge-network
    restart: unless-stopped

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ibm-knowledge-backend
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgresql://ibm_user:ibm_password@postgres:5432/ibm_knowledge
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRES_IN=24h
      - SESSION_SECRET=your-session-secret-key-change-this-in-production
      - IBM_SSO_CLIENT_ID=your-ibm-sso-client-id
      - IBM_SSO_CLIENT_SECRET=your-ibm-sso-client-secret
      - IBM_EMPLOYEE_API_URL=https://api.ibm.com/employees
      - AGENT_CONFIDENCE_THRESHOLD=0.7
      - AGENT_LEARNING_RATE=0.1
      - ENABLE_MOCK_DATA=true
      - ENABLE_AGENT_DEBUG=true
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./server:/app/server
      - ./logs:/app/logs
      - /app/node_modules
    networks:
      - ibm-knowledge-network
    restart: unless-stopped
    command: npm run server

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ibm-knowledge-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./client:/app/client
      - /app/client/node_modules
    networks:
      - ibm-knowledge-network
    restart: unless-stopped
    command: npm start

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ibm-knowledge-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - ibm-knowledge-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ibm-knowledge-network:
    driver: bridge 